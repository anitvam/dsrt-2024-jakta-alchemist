variables:
  environmentSize: &environment-size
    formula: 10
  sightRadius: &sightRadius
    formula: environmentSize / 2.0
    language: kotlin
  followRadius: &followRadius
    formula: sightRadius / 2
    language: kotlin
  agentFrequency: &agent-frequency
    type: LinearVariable
    parameters: [ 0.1, 0.5, 5, 0.5 ]
  speed: &speed
    type: LinearVariable
    parameters: [ 1, 0.5, 5, 0.5 ]
  agentVariance: &agent-variance
    formula: agentFrequency * 0.1
  lambdaDeliberate: &lambda-deliberate
    formula: 20
  lambda-act: &lambda-act
    formula: lambdaDeliberate
  numberOfDrones: &numberOfDrones
    type: ArbitraryVariable
    parameters: [20, 1, 5, 10, 20]
  seed: &seed { default: 0, min: 0, max: 99, step: 1 } # 100 samples
  scenario_seed: &scenario_seed { formula: (seed + 31) * seed } # Variable-dependent

seeds: { simulation: *seed, scenario: *scenario_seed }

incarnation: jakta
network-model:
  type: ConnectWithinDistance
  parameters: [ *sightRadius ]

_move-drone: &move-drone
  type: Event
  time-distribution: 10
  actions:
    type: MoveToTarget
    parameters: ["desiredPosition", *speed ]

_pool: &leader
  - time-distribution:
      type: JaktaTimeDistribution
      parameters:
        sense:
          type: DiracComb
          parameters:
            - *agent-variance
            - *agent-frequency
#          type: WeibullTime
#          parameters: [ *agent-frequency, *agent-variance ]
        deliberate:
          type: ExponentialTime
          parameters: *lambda-deliberate
        act:
          type: ExponentialTime
          parameters: *lambda-act
    program:
      agent-factory: it.unibo.jakta.examples.swarm.LeaderDrone.leader
      parameters: []

_program: &drone
  - time-distribution:
      type: JaktaTimeDistribution
      parameters:
        sense:
          type: DiracComb
          parameters:
            - *agent-variance
            - *agent-frequency
#          type: WeibullTime
#          parameters: [ *agent-frequency, *agent-variance ]
        deliberate:
          type: ExponentialTime
          parameters: *lambda-deliberate
        act:
          type: ExponentialTime
          parameters: *lambda-act
    program:
      agent-factory: it.unibo.jakta.examples.swarm.Drone.drone
      parameters: [ ]

deployments:
  - type: Point
    parameters: [ 0, 0 ]
    programs:
      - *leader
      - *move-drone
    contents:
      - molecule: leader
        concentration: true
      - molecule: radius
        concentration: *sightRadius
      - molecule: followRadius
        concentration: *followRadius
      - molecule: sightRadius
        concentration: *sightRadius
  - type: Circle
    parameters: [ *numberOfDrones, 0, 0, *environment-size ]
    programs:
      - *drone
      - *move-drone

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: 1-exported-data
      interval: 1.0
      exportPath: data
    data:
      - time
      - type: DistanceError

launcher:
  parameters: 
    batch: [seed, numberOfDrones, agentFrequency]

terminate:
  - type: AfterTime
    parameters: [ 1500 ]
